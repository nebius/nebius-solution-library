NEBIUS_TENANT_ID="$NEBIUS_TENANT_ID" # ='tenant-...'
NEBIUS_PROJECT_ID="$NEBIUS_PROJECT_ID" # ='project-...'
NEBIUS_REGION="${NEBIUS_REGION:-eu-north1}"

# O11y setup.
NEBIUS_OLLY_PROFILE="${NEBIUS_OLLY_PROFILE:-soperator-telemetry}"
NEBIUS_OLLY_TENANT_ID="${NEBIUS_OLLY_TENANT_ID:-tenant-e00vyb5y1x5vqkzw5e}" # ='tenant-...'
NEBIUS_OLLY_PROJECT_ID="${NEBIUS_OLLY_PROJECT_ID:-project-e00h61cxzwnf6zksvdn77}" # ='project-...'
NEBIUS_OLLY_GROUP_ID="${NEBIUS_OLLY_GROUP_ID:-group-e00jjk4aba7ybtmmhy}" # ='group-...'

if [ -z "${NEBIUS_TENANT_ID}" ]; then
  echo "Error: NEBIUS_TENANT_ID is not set"
  return 1
fi

if [ -z "${NEBIUS_PROJECT_ID}" ]; then
  echo "Error: NEBIUS_PROJECT_ID is not set"
  return 1
fi

if ! nebius profile list | grep -Fxq $NEBIUS_OLLY_PROFILE; then
  echo "Error: Profile $NEBIUS_OLLY_PROFILE not found"
  return 1
fi

# region IAM token

unset NEBIUS_IAM_TOKEN
nebius iam whoami > /dev/null
nebius iam get-access-token > /dev/null
nebius --profile $NEBIUS_OLLY_PROFILE iam get-access-token > /dev/null
NEBIUS_IAM_TOKEN=$(nebius iam get-access-token)
export NEBIUS_IAM_TOKEN

# endregion IAM token

# region VPC subnet

NEBIUS_VPC_SUBNET_ID=$(nebius vpc subnet list \
  --parent-id "${NEBIUS_PROJECT_ID}" \
  --format json \
  | jq -r '.items[0].metadata.id')
export NEBIUS_VPC_SUBNET_ID

# endregion VPC subnet

# region Remote state

# region Service account

NEBIUS_SA_TERRAFORM_ID=$(nebius iam service-account list \
  --parent-id "${NEBIUS_PROJECT_ID}" \
  --format json \
  | jq -r '.items[] | select(.metadata.name == "slurm-terraform-sa").metadata.id')

if [ -z "$NEBIUS_SA_TERRAFORM_ID" ]; then
  NEBIUS_SA_TERRAFORM_ID=$(nebius iam service-account create \
    --parent-id "${NEBIUS_PROJECT_ID}" \
    --name 'slurm-terraform-sa' \
    --format json \
    | jq -r '.metadata.id')
  echo "Created new service account with ID: $NEBIUS_SA_TERRAFORM_ID"
else
  echo "Found existing service account with ID: $NEBIUS_SA_TERRAFORM_ID"
fi

# endregion Service account

# region `editors` group

NEBIUS_GROUP_EDITORS_ID=$(nebius iam group get-by-name \
  --parent-id "${NEBIUS_TENANT_ID}" \
  --name 'editors' \
  --format json \
  | jq -r '.metadata.id')

IS_MEMBER=$(nebius iam group-membership list-members \
  --parent-id "${NEBIUS_GROUP_EDITORS_ID}" \
  --page-size 1000 \
  --format json \
  | jq -r --arg SAID "${NEBIUS_SA_TERRAFORM_ID}" '.memberships[] | select(.spec.member_id == $SAID) | .spec.member_id')


# Add service account to group editors only if not already a member
if [ -z "${IS_MEMBER}" ]; then
  nebius iam group-membership create \
    --parent-id "${NEBIUS_GROUP_EDITORS_ID}" \
    --member-id "${NEBIUS_SA_TERRAFORM_ID}"
  echo "Added service account to editors group"
else
  echo "Service account is already a member of editors group"
fi

# endregion `editors` group

# region Access key

DATE_FORMAT='+%Y-%m-%dT%H:%M:%SZ'

if [[ "$(uname)" == "Darwin" ]]; then
  # macOS
  EXPIRATION_DATE=$(date -v +1d "${DATE_FORMAT}")
else
  # Linux (assumes GNU date)
  EXPIRATION_DATE=$(date -d '+1 day' "${DATE_FORMAT}")
fi

echo 'Creating new access key for Object Storage'
NEBIUS_SA_ACCESS_KEY_ID=$(nebius iam access-key create \
  --parent-id "${NEBIUS_PROJECT_ID}" \
  --name "slurm-tf-ak-$(date +%s)" \
  --account-service-account-id "${NEBIUS_SA_TERRAFORM_ID}" \
  --description 'Temporary S3 Access' \
  --expires-at "${EXPIRATION_DATE}" \
  --format json \
  | jq -r '.resource_id')
echo "Created new access key: ${NEBIUS_SA_ACCESS_KEY_ID}"

# endregion Access key

# region AWS access key

AWS_ACCESS_KEY_ID=$(nebius iam access-key get-by-id \
  --id "${NEBIUS_SA_ACCESS_KEY_ID}" \
  --format json | jq -r '.status.aws_access_key_id')
export AWS_ACCESS_KEY_ID

echo "Generating new AWS_SECRET_ACCESS_KEY"
AWS_SECRET_ACCESS_KEY="$(nebius iam access-key get-secret-once \
  --id "${NEBIUS_SA_ACCESS_KEY_ID}" \
  --format json \
  | jq -r '.secret')"
export AWS_SECRET_ACCESS_KEY

# endregion AWS access key

# region Bucket

NEBIUS_BUCKET_NAME="tfstate-slurm-k8s-$(echo -n "${NEBIUS_TENANT_ID}-${NEBIUS_PROJECT_ID}" | md5sum | awk '$0=$1')"
export NEBIUS_BUCKET_NAME
# Check if bucket exists
EXISTING_BUCKET=$(nebius storage bucket list \
  --parent-id "${NEBIUS_PROJECT_ID}" \
  --format json \
  | jq -r --arg BUCKET "${NEBIUS_BUCKET_NAME}" '.items[]? | select(.metadata.name == $BUCKET) | .metadata.name')

if [ -z "${EXISTING_BUCKET}" ]; then
  nebius storage bucket create \
    --name "${NEBIUS_BUCKET_NAME}" \
    --parent-id "${NEBIUS_PROJECT_ID}" \
    --versioning-policy 'enabled'
  echo "Created bucket: ${NEBIUS_BUCKET_NAME}"
else
  echo "Using existing bucket: ${NEBIUS_BUCKET_NAME}"
fi

# endregion Bucket

# region Backend override

cat > terraform_backend_override.tf << EOF
terraform {
  backend "s3" {
    bucket = "${NEBIUS_BUCKET_NAME}"
    key    = "slurm-k8s.tfstate"

    endpoints = {
      s3 = "https://storage.${NEBIUS_REGION}.nebius.cloud:443"
    }
    region = "${NEBIUS_REGION}"

    skip_region_validation      = true
    skip_credentials_validation = true
    skip_requesting_account_id  = true
    skip_s3_checksum            = true
  }
}
EOF

# endregion Backend override

# endregion Remote state

# region TF variables

export TF_VAR_region="${NEBIUS_REGION}"
export TF_VAR_iam_token="${NEBIUS_IAM_TOKEN}"
export TF_VAR_iam_tenant_id="${NEBIUS_TENANT_ID}"
export TF_VAR_iam_project_id="${NEBIUS_PROJECT_ID}"
export TF_VAR_o11y_iam_tenant_id="${NEBIUS_OLLY_TENANT_ID}"
export TF_VAR_o11y_iam_project_id="${NEBIUS_OLLY_PROJECT_ID}"
export TF_VAR_o11y_iam_group_id="${NEBIUS_OLLY_GROUP_ID}"
export TF_VAR_o11y_profile="${NEBIUS_OLLY_PROFILE}"
export TF_VAR_vpc_subnet_id="${NEBIUS_VPC_SUBNET_ID}"
export TF_VAR_aws_access_key_id="${AWS_ACCESS_KEY_ID}"
export TF_VAR_aws_secret_access_key="${AWS_SECRET_ACCESS_KEY}"
export TFE_PARALLELISM=20

echo "Exported variables:"
echo "TF_VAR_region: ${TF_VAR_region}"
echo "TF_VAR_iam_tenant_id: ${TF_VAR_iam_tenant_id}"
echo "TF_VAR_iam_project_id: ${TF_VAR_iam_project_id}"
echo "TF_VAR_o11y_iam_tenant_id: ${TF_VAR_o11y_iam_tenant_id}"
echo "TF_VAR_o11y_iam_project_id: ${TF_VAR_o11y_iam_project_id}"
echo "TF_VAR_o11y_iam_group_id: ${TF_VAR_o11y_iam_group_id}"
echo "TF_VAR_o11y_profile: ${TF_VAR_o11y_profile}"
echo "TF_VAR_vpc_subnet_id: ${TF_VAR_vpc_subnet_id}"
echo "TF_VAR_aws_access_key_id ${TF_VAR_aws_access_key_id}"
echo "TFE_PARALLELISM: ${TFE_PARALLELISM}"

# endregion TF variables
