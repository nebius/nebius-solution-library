if [ -z "${NEBIUS_TENANT_ID}" ]; then
    echo "Error: NEBIUS_TENANT_ID is not set"
    return 1
fi

if [ -z "${NEBIUS_PROJECT_ID}" ]; then
    echo "Error: NEBIUS_PROJECT_ID is not set" 
    return 1
fi

if [ -z "${NEBIUS_REGION}" ]; then
    echo "Error: NEBIUS_REGION is not set" 
    return 1
fi

# Separate declaration and assignment for IAM token
unset NEBIUS_IAM_TOKEN
nebius iam whoami > /dev/null
nebius iam get-access-token > /dev/null
NEBIUS_IAM_TOKEN=$(nebius iam get-access-token)
export NEBIUS_IAM_TOKEN
export TF_VAR_iam_token="${NEBIUS_IAM_TOKEN}"
export TF_VAR_iam_tenant_id="${NEBIUS_TENANT_ID}"
export TF_VAR_iam_project_id="${NEBIUS_PROJECT_ID}"

# Separate declaration and assignment for VPC subnet
NEBIUS_VPC_SUBNET_ID=$(nebius vpc subnet list \
  --parent-id "${NEBIUS_PROJECT_ID}" \
  --format json \
  | jq -r '.items[0].metadata.id')
export NEBIUS_VPC_SUBNET_ID
export TF_VAR_vpc_subnet_id="${NEBIUS_VPC_SUBNET_ID}"

# Separate declaration and assignment for group editors
NEBIUS_GROUP_EDITORS_ID=$(nebius iam group get-by-name \
    --parent-id "${NEBIUS_TENANT_ID}" \
    --name 'editors' \
    --format json \
    | jq -r '.metadata.id')

# Separate declaration and assignment for service account
NEBIUS_SA_TERRAFORM_ID=$(nebius iam service-account list \
  --parent-id "${NEBIUS_PROJECT_ID}" \
  --format json \
  | jq -r '.items[] | select(.metadata.name == "slurm-terraform-sa").metadata.id')

if [ -z "$NEBIUS_SA_TERRAFORM_ID" ]; then
  NEBIUS_SA_TERRAFORM_ID=$(nebius iam service-account create \
    --parent-id "${NEBIUS_PROJECT_ID}" \
    --name 'slurm-terraform-sa' \
    --format json \
    | jq -r '.metadata.id')
  echo "Created new service account with ID: $NEBIUS_SA_TERRAFORM_ID"
else
  echo "Found existing service account with ID: $NEBIUS_SA_TERRAFORM_ID"
fi

# Check if service account is already a member of editors group
IS_MEMBER=$(nebius iam group-membership list-members \
    --parent-id "${NEBIUS_GROUP_EDITORS_ID}" \
    --format json \
    | jq -r --arg SAID "${NEBIUS_SA_TERRAFORM_ID}" '.memberships[] | select(.spec.member_id == $SAID) | .spec.member_id')

# Add service account to group editors only if not already a member
if [ -z "${IS_MEMBER}" ]; then
    nebius iam group-membership create \
        --parent-id "${NEBIUS_GROUP_EDITORS_ID}" \
        --member-id "${NEBIUS_SA_TERRAFORM_ID}"
    echo "Added service account to editors group"
else
    echo "Service account is already a member of editors group"
fi

# Separate declaration and assignment for access key
NEBIUS_SA_ACCESS_KEY_ID=$(nebius iam access-key list \
  --parent-id "${NEBIUS_PROJECT_ID}" \
  --format json \
  | jq -r '.items // [] | map(select(.metadata.name == "slurm-terraform-sa-access-key")) | .[0].metadata.id // empty')

if [ -z "${NEBIUS_SA_ACCESS_KEY_ID}" ]; then
  NEBIUS_SA_ACCESS_KEY_ID=$(nebius iam access-key create \
    --parent-id "${NEBIUS_PROJECT_ID}" \
    --name 'slurm-terraform-sa-access-key' \
    --account-service-account-id "${NEBIUS_SA_TERRAFORM_ID}" \
    --description 'AWS CLI key' \
    --format json \
    | jq -r '.resource_id')
fi

# Separate declaration and assignment for AWS access key
AWS_ACCESS_KEY_ID=$(nebius iam access-key get-by-id \
  --id "${NEBIUS_SA_ACCESS_KEY_ID}" \
  --format json | jq -r '.status.aws_access_key_id')
export AWS_ACCESS_KEY_ID

if [ -f '.aws_secret_access_key' ] && [ -s '.aws_secret_access_key' ]; then
  AWS_SECRET_ACCESS_KEY="$(cat '.aws_secret_access_key')"
else
  AWS_SECRET_ACCESS_KEY="$(nebius iam access-key get-secret-once \
    --id "${NEBIUS_SA_ACCESS_KEY_ID}" \
    --format json \
    | jq -r '.secret')"
  echo "${AWS_SECRET_ACCESS_KEY}" > .aws_secret_access_key
fi

if [ -z "${AWS_SECRET_ACCESS_KEY}" ]; then
  echo "Error: AWS_SECRET_ACCESS_KEY is empty" >&2
  exit 1
fi

export AWS_SECRET_ACCESS_KEY

aws configure set aws_access_key_id "${AWS_ACCESS_KEY_ID}"
aws configure set aws_secret_access_key "${AWS_SECRET_ACCESS_KEY}"
aws configure set region 'eu-north1'
aws configure set endpoint_url 'https://storage.eu-north1.nebius.cloud:443'

export NEBIUS_BUCKET_NAME="tfstate-slurm-k8s-$(echo -n "${NEBIUS_TENANT_ID}-${NEBIUS_PROJECT_ID}" | md5sum | awk '$0=$1')"
# Check if bucket exists
EXISTING_BUCKET=$(nebius storage bucket list \
    --parent-id "${NEBIUS_PROJECT_ID}" \
    --format json \
    | jq -r --arg BUCKET "${NEBIUS_BUCKET_NAME}" '.items[] | select(.metadata.name == $BUCKET) | .metadata.name')

if [ -z "${EXISTING_BUCKET}" ]; then
    nebius storage bucket create \
        --name "${NEBIUS_BUCKET_NAME}" \
        --parent-id "${NEBIUS_PROJECT_ID}" \
        --versioning-policy 'enabled'
    echo "Created bucket: ${NEBIUS_BUCKET_NAME}"
else
    echo "Using existing bucket: ${NEBIUS_BUCKET_NAME}"
fi


# print all exported variables
echo "Exported variables:"
echo "NEBIUS_TENANT_ID: ${NEBIUS_TENANT_ID}"
echo "NEBIUS_PROJECT_ID: ${NEBIUS_PROJECT_ID}"
echo "NEBIUS_BUCKET_NAME: ${NEBIUS_BUCKET_NAME}"

cat > terraform_backend_override.tf << EOF
terraform {
  backend "s3" {
    bucket = "${NEBIUS_BUCKET_NAME}"
    key    = "slurm-k8s.tfstate"

    endpoints = {
      s3 = "https://storage.${NEBIUS_REGION}.nebius.cloud:443"
    }
    region = "${NEBIUS_REGION}"

    skip_region_validation      = true
    skip_credentials_validation = true
    skip_requesting_account_id  = true
    skip_s3_checksum            = true
  }
}
EOF
